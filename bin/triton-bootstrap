#!/bin/bash

#
# This script is run once on the first Couchbase instance to bootstrap the cluster
#

# Couchbase-related environment variables
export MYIPPRIVATE=$(ip addr show eth0 | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
export MYIPPUBLIC=$(ip addr show eth1 | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
export MYMEMORY=$(free -m | grep -o "Mem:\s*[0-9]*" | grep -o "[0-9]*")
export MYCPUS=$(nproc)
export MYCPUS=$(($MYCPUS>12?$(($MYMEMORY/3072)):$MYCPUS))
export MYCPUS=$(($MYCPUS>1?$MYCPUS:1))
export COUCHBASE_NS_SERVER_VM_EXTRA_ARGS=$(printf '["+S", "%s"]' $MYCPUS)
export ERL_AFLAGS="+S $MYCPUS"
export GOMAXPROCS=$MYCPUS
export MYMEMORY=$((($MYMEMORY/10)*8))
export BUCKET=$2

installed ()
{
    echo
    echo '#'
    echo '# Couchbase is installed and configured'
    echo '#'
    echo "# Dashboard: http://$MYIPPUBLIC:8091"
    echo "# Internal IP: $MYIPPRIVATE"
    echo '# username=Administrator'
    echo '# password=password'
    echo '#'
}

echo
echo '#'
echo '# Testing to see if Couchbase is running yet'
echo '#'

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    # test the default u/p
    couchbase-cli server-info -c 127.0.0.1:8091 -u access -p password &> /dev/null
    if [ $? -eq 0 ]; then
        let COUCHBASERESPONSIVE=1
    fi

    # test the alternate u/p
    couchbase-cli server-info -c 127.0.0.1:8091 -u Administrator -p password &> /dev/null
    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep .7
    fi
done
sleep 1

# it's responsive, is it already configured?
couchbase-cli server-list -c 127.0.0.1:8091 -u Administrator -p password &> /dev/null
if [ $? -eq 0 ]; then
    echo
    echo '#'
    echo '# Already joined to cluster...'
    echo '#'
    installed

    exit
fi

echo
echo '#'
echo '# Checking Consul availability'
echo '#'

curl http://consul:8500/v1/agent/services &> /dev/null
if [ $? -ne 0 ]
then
    echo '#'
    echo '# Consul is required, but unreachable'
    echo '#'
    exit
else
    echo '# Consul instance found and responsive'
    echo '#'
fi

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    # test the default u/p
    couchbase-cli server-info -c 127.0.0.1:8091 -u access -p password &> /dev/null
    if [ $? -eq 0 ]; then
        let COUCHBASERESPONSIVE=1
    fi

    # test the alternate u/p
    couchbase-cli server-info -c 127.0.0.1:8091 -u Administrator -p password &> /dev/null
    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep .7
    fi
done
sleep 1

echo
echo '#'
echo '# Initializing node'
echo '#'

/opt/couchbase/bin/couchbase-cli node-init -c 127.0.0.1:8091 -u access -p password \
    --node-init-data-path=/opt/couchbase/var/lib/couchbase/data \
    --node-init-index-path=/opt/couchbase/var/lib/couchbase/data \
    --node-init-hostname=$MYIPPRIVATE

if [ "$1" = 'bootstrap' ]
then
    echo '#'
    echo '# Bootstrapping cluster'
    echo '#'

    # initializing the cluster
    /opt/couchbase/bin/couchbase-cli cluster-init -c 127.0.0.1:8091 -u access -p password \
        --cluster-init-username=Administrator \
        --cluster-init-password=password \
        --cluster-init-port=8091 \
        --cluster-init-ramsize=$MYMEMORY

    # creating the bucket
    /opt/couchbase/bin/couchbase-cli bucket-create -c 127.0.01:8091 -u Administrator -p password \
        --bucket=$BUCKET \
        --bucket-type=couchbase \
        --bucket-ramsize=$MYMEMORY \
        --bucket-replica=1

    # limit the number of threads for various operations on this bucket
    # See http://docs.couchbase.com/admin/admin/CLI/CBepctl/cbepctl-threadpool-tuning.html for more details
    /opt/couchbase/bin/cbepctl 127.0.0.1:11210 -b $BUCKET set flush_param max_num_writers $(($MYCPUS>1?$MYCPUS/2:1))
    /opt/couchbase/bin/cbepctl 127.0.0.1:11210 -b $BUCKET set flush_param max_num_readers $(($MYCPUS>1?$MYCPUS/2:1))
    /opt/couchbase/bin/cbepctl 127.0.0.1:11210 -b $BUCKET set flush_param max_num_auxio 1
    /opt/couchbase/bin/cbepctl 127.0.0.1:11210 -b $BUCKET set flush_param max_num_nonio 1

else
    echo '#'
    echo '# Looking for an existing cluster'
    echo '#'

    CLUSTERFOUND=0
    while [ $CLUSTERFOUND != 1 ]; do
        echo -n '.'

        CLUSTERIP=$(curl -sL http://consul:8500/v1/catalog/service/couchbase | json -aH ServiceAddress | head -1)
        if [ -n "$CLUSTERIP" ]
        then
            let CLUSTERFOUND=1
        else
            sleep 7
        fi
    done


    echo
    echo '#'
    echo '# Joining cluster...'
    echo '#'

    COUCHBASERESPONSIVE=0
    while [ $COUCHBASERESPONSIVE != 1 ]; do
        echo -n '.'

        curl -s -i -u Administrator:password \
            "http://$CLUSTERIP:8091/controller/addNode" \
            -d "hostname=$(ip addr show eth0 | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')&user=admin&password=password"
        if [ $? -eq 0 ]
        then
            let COUCHBASERESPONSIVE=1
        else
            sleep .7
        fi
    done

    echo
    echo '#'
    echo '# Rebalancing cluster'
    echo '#'

    # doing this in a loop in case multiple containers are started at once
    # it seems the rebalance command cannot be called while a rebalance is in progress
    COUCHBASERESPONSIVE=0
    while [ $COUCHBASERESPONSIVE != 1 ]; do
        echo -n '.'

        couchbase-cli rebalance -c 127.0.0.1:8091 -u Administrator -p password
        if [ $? -eq 0 ]
        then
            let COUCHBASERESPONSIVE=1
        else
            sleep .7
        fi
    done
fi


echo
echo '#'
echo '# Confirming cluster health...'
echo '#'

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    couchbase-cli server-list -c 127.0.0.1:8091 -u Administrator -p password
    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep .7
    fi

    # if this never exits, then it will never register as a healthy node in the cluster
    # watch the logs for that...
done

echo
echo '#'
echo '# Registering service instance'
echo '#'

curl http://consul:8500/v1/agent/service/register -d "$(printf '{"ID":"couchbase-%s","Name":"couchbase","Address":"%s"}' $MYIPPRIVATE $MYIPPRIVATE)"

installed